{"ast":null,"code":"import { Card } from \"@/components/Card\";\nimport SeatMapTable from \"@/components/SeatMapTable\";\nimport SeatMapService from \"../services/SeatMapService\";\nconst tableColumns = [];\nconst tableData = [];\nexport default {\n  components: {\n    Card,\n    SeatMapTable\n  },\n  data() {\n    return {\n      seatMaps: [],\n      totalElements: 0,\n      page: 0,\n      searchQuery: '',\n      table1: {\n        title: \"Simple Table\",\n        columns: [...tableColumns],\n        data: [...tableData]\n      }\n    };\n  },\n  methods: {\n    async getAllSeatMaps(sortBy = 'seatMapId', sortOrder = 'true', page = \"0\", size = \"50\") {\n      try {\n        try {\n          const searchDTO = {\n            sortBy: sortBy,\n            sortOrder: sortOrder,\n            searchQuery: this.searchQuery,\n            page: page,\n            size: size\n          };\n          let response = await SeatMapService.getAllSeatMaps(searchDTO);\n          if (!response.data.empty) {\n            if (response.data.seatMaps.length) {\n              this.seatMaps = response.data.seatMaps;\n            }\n            this.totalElements = response.data.totalElements;\n            this.page = response.data.page;\n          }\n        } catch (error) {\n          console.error(\"Error fetching seatMaps:\", error);\n        }\n      } catch (error) {\n        console.error(\"Error fetching seatMap details:\", error);\n      }\n    }\n  },\n  mounted() {\n    this.getAllSeatMaps();\n  },\n  created() {\n    this.$root.$on('searchQueryForSeatMapsChanged', searchQuery => {\n      this.searchQuery = searchQuery;\n      this.getAllSeatMaps();\n    });\n  }\n};","map":{"version":3,"names":["Card","SeatMapTable","SeatMapService","tableColumns","tableData","components","data","seatMaps","totalElements","page","searchQuery","table1","title","columns","methods","getAllSeatMaps","sortBy","sortOrder","size","searchDTO","response","empty","length","error","console","mounted","created","$root","$on"],"sources":["src/pages/SeatMaps.vue"],"sourcesContent":["<template>\n  <div class=\"content\">\n    <div class=\"row\">\n      <div class=\"col-12\">\n        <card class=\"card-plain\">\n          <!-- <template slot=\"header\">\n            <h4 class=\"card-title\">Table on Plain Background</h4>\n            <p class=\"category\">Here is a subtitle for this table</p>\n          </template>-->\n          <div class=\"table-full-width text-left\">\n            <seatMap-table\n            v-if=\"seatMaps && seatMaps.length > 0\"\n\t\t\t\t:title=\"table1.title\"\n\t\t\t\t:sub-title=\"table1.subTitle\"\n\t\t\t\t:seatMaps=\"seatMaps\"\n\t\t\t\t:totalElements=\"totalElements\"\n\t\t\t\t:page=\"page\"\n\t\t\t\t:columns=\"table1.columns\"\n \t\t\t\t@get-all-seat-maps=\"getAllSeatMaps\"\n             >\n\n            </seatMap-table>\n          </div>\n        </card>\n      </div>\n\n    </div>\n  </div>\n</template>\n<script>\nimport { Card } from \"@/components/Card\";\n\nimport SeatMapTable from \"@/components/SeatMapTable\";\nimport SeatMapService from \"../services/SeatMapService\";\n\nconst tableColumns = [];\nconst tableData = [\n];\n\nexport default {\n  components: {\n    Card,\n    SeatMapTable,\n  },\n  data() {\n    return {\n      seatMaps: [],\n\t  totalElements: 0,\n      page: 0,\n      searchQuery: '',     \n      table1: {\n        title: \"Simple Table\",\n        columns: [...tableColumns],\n        data: [...tableData],\n      },\n    };\n  },\n  methods: {\n    async getAllSeatMaps(sortBy='seatMapId',sortOrder='true',page=\"0\",size=\"50\") {\n      try {\n        try {\n\t\t\tconst searchDTO = {\n\t\t\t\tsortBy: sortBy, \n\t\t\t\tsortOrder: sortOrder, \n\t\t\t\tsearchQuery: this.searchQuery,\n\t\t\t\tpage: page, \n\t\t\t\tsize: size\n\t\t\t};\n\t        let response = await SeatMapService.getAllSeatMaps(searchDTO);\n\t        if (!response.data.empty) {\n\t\t        if (response.data.seatMaps.length) {\n\t\t\t\t\tthis.seatMaps = response.data.seatMaps;\n\t\t\t\t}\n      \t\t\tthis.totalElements = response.data.totalElements;\n      \t\t\tthis.page = response.data.page;\n\t        }\n        } catch (error) {\n          console.error(\"Error fetching seatMaps:\", error);\n        }\n        \n      } catch (error) {\n        console.error(\"Error fetching seatMap details:\", error);\n      }\n    },\n  },\n  mounted() {\n    this.getAllSeatMaps();\n  },\n  created() {\n    this.$root.$on('searchQueryForSeatMapsChanged', (searchQuery) => {\n    \tthis.searchQuery = searchQuery;\n    \tthis.getAllSeatMaps();\n    })\n  }\n};\n</script>\n<style></style>\n"],"mappings":"AA8BA,SAAAA,IAAA;AAEA,OAAAC,YAAA;AACA,OAAAC,cAAA;AAEA,MAAAC,YAAA;AACA,MAAAC,SAAA,KACA;AAEA;EACAC,UAAA;IACAL,IAAA;IACAC;EACA;EACAK,KAAA;IACA;MACAC,QAAA;MACAC,aAAA;MACAC,IAAA;MACAC,WAAA;MACAC,MAAA;QACAC,KAAA;QACAC,OAAA,MAAAV,YAAA;QACAG,IAAA,MAAAF,SAAA;MACA;IACA;EACA;EACAU,OAAA;IACA,MAAAC,eAAAC,MAAA,gBAAAC,SAAA,WAAAR,IAAA,QAAAS,IAAA;MACA;QACA;UACA,MAAAC,SAAA;YACAH,MAAA,EAAAA,MAAA;YACAC,SAAA,EAAAA,SAAA;YACAP,WAAA,OAAAA,WAAA;YACAD,IAAA,EAAAA,IAAA;YACAS,IAAA,EAAAA;UACA;UACA,IAAAE,QAAA,SAAAlB,cAAA,CAAAa,cAAA,CAAAI,SAAA;UACA,KAAAC,QAAA,CAAAd,IAAA,CAAAe,KAAA;YACA,IAAAD,QAAA,CAAAd,IAAA,CAAAC,QAAA,CAAAe,MAAA;cACA,KAAAf,QAAA,GAAAa,QAAA,CAAAd,IAAA,CAAAC,QAAA;YACA;YACA,KAAAC,aAAA,GAAAY,QAAA,CAAAd,IAAA,CAAAE,aAAA;YACA,KAAAC,IAAA,GAAAW,QAAA,CAAAd,IAAA,CAAAG,IAAA;UACA;QACA,SAAAc,KAAA;UACAC,OAAA,CAAAD,KAAA,6BAAAA,KAAA;QACA;MAEA,SAAAA,KAAA;QACAC,OAAA,CAAAD,KAAA,oCAAAA,KAAA;MACA;IACA;EACA;EACAE,QAAA;IACA,KAAAV,cAAA;EACA;EACAW,QAAA;IACA,KAAAC,KAAA,CAAAC,GAAA,kCAAAlB,WAAA;MACA,KAAAA,WAAA,GAAAA,WAAA;MACA,KAAAK,cAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}